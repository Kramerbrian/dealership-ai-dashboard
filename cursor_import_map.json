{
  "files": [
    {
      "path": "docs/dai_algorithm_engine_v2.json",
      "content": "{\n  \"spec_version\": \"2025-11-01\",\n  \"qai_quantum_authority_index\": {\n    \"display_name\": \"Internal Execution (QAI)\",\n    \"formula\": \"QAI = λ_PIQR × (SEO + AEO + GEO) × VDP_Quality\",\n    \"description\": \"Measures operational excellence and data integrity\",\n    \"components\": {\n      \"λ_PIQR\": {\n        \"name\": \"Personalized Intelligence Quality Rating\",\n        \"weight\": \"multiplier\",\n        \"data_sources\": [\"CRM\", \"DMS\", \"GA4\"]\n      },\n      \"SEO\": {\n        \"name\": \"Search Engine Optimization\",\n        \"formula\": \"W1(CWV) + W2(Crawl_Index) + W3(Content_Quality)\",\n        \"weights\": { \"W1\": 0.4, \"W2\": 0.3, \"W3\": 0.3 }\n      },\n      \"AEO\": {\n        \"name\": \"Answer Engine Optimization\",\n        \"formula\": \"WA(PAA_Share) + WB(FAQ_Schema) + WC(Local_Citations)\",\n        \"weights\": { \"WA\": 0.35, \"WB\": 0.35, \"WC\": 0.3 }\n      },\n      \"GEO\": {\n        \"name\": \"Generative Engine Optimization\",\n        \"formula\": \"WG(CSGV) - λ_HRP(Hallucination_Risk)\",\n        \"weights\": { \"WG\": 1.0, \"λ_HRP\": \"penalty_multiplier\" }\n      },\n      \"VDP_Quality\": {\n        \"name\": \"Vehicle Detail Page Quality\",\n        \"range\": \"0-1\",\n        \"factors\": [\"image_count\", \"description_length\", \"pricing_transparency\", \"schema_completeness\"]\n      }\n    }\n  },\n  \"pillar_formulas\": {\n    \"SEO\": {\n      \"display_name\": \"Search Foundation\",\n      \"formula\": \"SEO = 0.4(CWV) + 0.3(Crawl_Index) + 0.3(Content_Quality)\",\n      \"color\": \"#06b6d4\",\n      \"description\": \"Technical health and content quality\",\n      \"components\": [\n        {\"name\": \"Core Web Vitals (CWV)\", \"weight\": 0.4, \"metrics\": [\"LCP\", \"FID\", \"CLS\"], \"data_sources\": [\"Google PageSpeed Insights\", \"GA4\"]},\n        {\"name\": \"Crawl Index\", \"weight\": 0.3, \"metrics\": [\"indexed_pages\", \"crawl_errors\", \"sitemap_coverage\"], \"data_sources\": [\"Google Search Console\"]},\n        {\"name\": \"Content Quality\", \"weight\": 0.3, \"metrics\": [\"word_count\", \"unique_content_%\", \"internal_links\"], \"data_sources\": [\"Website crawler\", \"Content analysis API\"]}\n      ]\n    },\n    \"AEO\": {\n      \"display_name\": \"Zero-Click Dominance\",\n      \"formula\": \"AEO = 0.35(PAA_Share) + 0.35(FAQ_Schema) + 0.3(Local_Citations)\",\n      \"color\": \"#8b5cf6\",\n      \"description\": \"Featured snippet and zero-click presence\",\n      \"components\": [\n        {\"name\": \"People Also Ask Share\", \"weight\": 0.35, \"metrics\": [\"paa_appearances\", \"position_in_paa\", \"query_relevance\"], \"data_sources\": [\"SE Ranking\", \"SerpAPI\"]},\n        {\"name\": \"FAQ Schema\", \"weight\": 0.35, \"metrics\": [\"faq_pages_count\", \"schema_validation\", \"rich_result_eligibility\"], \"data_sources\": [\"Schema validator\", \"GSC Rich Results\"]},\n        {\"name\": \"Local Citations\", \"weight\": 0.3, \"metrics\": [\"citation_count\", \"nap_consistency\", \"authoritative_sources\"], \"data_sources\": [\"BrightLocal\", \"Moz Local\"]}\n      ]\n    },\n    \"GEO\": {\n      \"display_name\": \"Generative Engine\",\n      \"formula\": \"GEO = CSGV - λ_HRP(Hallucination_Risk)\",\n      \"color\": \"#f59e0b\",\n      \"description\": \"AI assistant citation frequency\",\n      \"components\": [\n        {\"name\": \"Citation Strength in Generative Visibility (CSGV)\", \"weight\": 1.0, \"metrics\": [\"citation_frequency\", \"mention_context\", \"source_authority\"], \"data_sources\": [\"LLM Tracker\", \"Manual AI audits\", \"GenRank\"], \"note\": \"10% real queries, 90% synthetic correlation\"},\n        {\"name\": \"Hallucination Risk Penalty (λ_HRP)\", \"weight\": \"penalty\", \"metrics\": [\"false_claims_detected\", \"conflicting_info\", \"outdated_data\"], \"data_sources\": [\"Review monitoring\", \"Website consistency check\"]}\n      ]\n    }\n  },\n  \"financial_formulas\": {\n    \"OCI\": {\n      \"display_name\": \"Opportunity Cost of Inaction\",\n      \"formula\": \"OCI = (ΔLeads_Potential × AvgGPPU_Org) / Risk_Adjustment_Factor\",\n      \"description\": \"Monthly revenue at risk from unfixed quality gaps\"\n    },\n    \"AIA\": {\n      \"display_name\": \"AI Influence Attribution\",\n      \"formula\": \"AIA = Σ(Touchpoint_Value × Proximity_to_Conversion) × Closing_Rate\",\n      \"description\": \"Revenue attributed to AI-assisted customer journeys\"\n    },\n    \"DECAY_TAX\": {\n      \"display_name\": \"Authority Decay Tax\",\n      \"formula\": \"Decay_Tax = CAC_Increase × Monthly_Lead_Volume × TSM\",\n      \"description\": \"Additional cost per month due to declining Trust Score\"\n    }\n  },\n  \"data_source_mapping\": {\n    \"GA4\": {\"feeds_into\": [\"SEO\", \"AEO\", \"AIA\"], \"metrics\": [\"time_to_conversion\", \"bounce_rate_ai_traffic\", \"user_journey_mapping\"]},\n    \"CRM\": {\"platforms\": [\"VinSolutions\", \"DealerSocket\", \"Elead\", \"Dealertrack\"], \"feeds_into\": [\"AIA\", \"QAI\", \"λ_PIQR\"], \"metrics\": [\"ai_influenced_opportunities\", \"follow_up_quality\", \"closing_rate\"]},\n    \"DMS\": {\"platforms\": [\"CDK\", \"Reynolds & Reynolds\", \"Dealertrack\"], \"feeds_into\": [\"QAI\", \"E-E-A-T (Experience)\"]}\n  }\n}\n"
    },
    {
      "path": "lib/ai/formulas.ts",
      "content": "import algo from \"@/docs/dai_algorithm_engine_v2.json\" assert { type: \"json\" };\nexport type DAIAlgo = typeof algo;\nexport const DAI_ALGO: DAIAlgo = algo as DAIAlgo;\n\nexport const getQAIFormula = () => DAI_ALGO.qai_quantum_authority_index.formula;\nexport const PILLARS = Object.keys(DAI_ALGO.pillar_formulas) as Array<keyof typeof DAI_ALGO.pillar_formulas>;\n"
    },
    {
      "path": "lib/pulse/schemas.ts",
      "content": "import { z } from \"zod\";\nexport const MarketEventType = z.enum([\"OEM_MSRP_CHANGE\",\"INCENTIVE_CHANGE\",\"DEMAND_SHOCK\"]);\nexport const MarketEventZ = z.object({\n  eventId: z.string(),\n  type: MarketEventType,\n  oem: z.string().nullable().optional(),\n  models: z.array(z.string()),\n  deltaMsrpAbs: z.number().optional(),\n  deltaMsrpPct: z.number().optional(),\n  incentive: z.object({ jurisdiction: z.string(), program: z.string(), deltaRebateAbs: z.number(), effectiveDate: z.string() }).optional(),\n  demand: z.object({ metric: z.enum([\"lead_velocity\",\"sales_velocity\"]), deltaPct: z.number(), window: z.enum([\"7d\",\"14d\",\"30d\"]) }).optional(),\n  regionScope: z.array(z.string()).optional(),\n  effectiveDate: z.string().optional(),\n  source: z.enum([\"PulseGPT\",\"Manual\",\"Feed\"]),\n  confidence: z.number().min(0).max(1),\n  tags: z.array(z.string()).optional(),\n  narrative: z.string().optional()\n});\nexport const DealerModelImpactZ = z.object({\n  dealerId: z.string(),\n  modelId: z.string(),\n  timestamp: z.string(),\n  baseline: z.object({ msrp: z.number(), otd: z.number().optional() }),\n  oemDelta: z.object({ msrpAbs: z.number(), msrpPct: z.number().optional(), fromEventId: z.string() }).optional(),\n  incentiveDelta: z.object({ jurisdiction: z.string(), abs: z.number(), fromEventId: z.string() }).optional(),\n  appraisalAdj: z.number().optional(),\n  priceAction: z.object({ recommendedOtd: z.number().optional(), actionLabel: z.enum([\"REPRICE_INVENTORY\",\"HOLD\",\"WHOLESALE\",\"PROMO\"]).optional() }).optional(),\n  forecast: z.object({ leadLiftPct: z.number().optional(), volumeLiftUnits: z.number().optional(), grossImpactUsd: z.number().optional() }).optional(),\n  confidence: z.number()\n});\nexport type MarketEvent = z.infer<typeof MarketEventZ>;\nexport type DealerModelImpact = z.infer<typeof DealerModelImpactZ>;\n"
    },
    {
      "path": "lib/pulse/elasticity.ts",
      "content": "export const DEFAULT_ELASTICITY = { priceElasticity: 0.7, incentiveElasticity: 0.5, speedElasticity: 0.3 } as const;\nexport function appraisalAdjustment(msrpDeltaAbs: number, priceElasticity = DEFAULT_ELASTICITY.priceElasticity) { return msrpDeltaAbs * priceElasticity; }\nexport function severityForMsrp(deltaPctAbs: number, isTop10Model: boolean) { if (deltaPctAbs >= 0.03 && isTop10Model) return \"P0\"; if (deltaPctAbs >= 0.01) return \"P1\"; return \"P2\"; }\n"
    },
    {
      "path": "lib/pulse/service.ts",
      "content": "import { prisma } from \"@/lib/prisma\";\nimport { MarketEvent, DealerModelImpact } from \"./schemas\";\nimport { appraisalAdjustment } from \"./elasticity\";\nexport async function ingestEvents(events: MarketEvent[]) {\n  const rows = events.map(e => ({\n    event_id: e.eventId, type: e.type, oem: e.oem ?? null, models: e.models,\n    delta_msrp_abs: e.deltaMsrpAbs ?? null, delta_msrp_pct: e.deltaMsrpPct ?? null,\n    incentive: e.incentive ?? null, demand: e.demand ?? null, region_scope: e.regionScope ?? null,\n    effective_date: e.effectiveDate ? new Date(e.effectiveDate) : null,\n    source: e.source, confidence: e.confidence, tags: e.tags ?? null, narrative: e.narrative ?? null\n  }));\n  for (const row of rows) { await prisma.marketEvent.upsert({ where: { event_id: row.event_id }, update: row, create: row }); }\n  return { ok: true, ingested: rows.length };\n}\nexport async function computeImpacts(args: { dealers?: string[] }) {\n  const events = await prisma.marketEvent.findMany({ orderBy: { effective_date: \"desc\" } });\n  const impacts: DealerModelImpact[] = [] as any;\n  for (const e of events) {\n    if (e.type !== \"OEM_MSRP_CHANGE\") continue;\n    const msrpAbs = e.delta_msrp_abs ?? 0;\n    const rooftops = args.dealers?.length ? args.dealers : [\"dea_demo_1\"];\n    for (const dealerId of rooftops) {\n      for (const modelName of (e.models as string[])) {\n        const baselineMsrp = 35000; const baselineOtd = 32990;\n        const adj = appraisalAdjustment(msrpAbs);\n        impacts.push({\n          dealerId, modelId: modelName.toLowerCase().replace(/\\s+/g, \"_\"), timestamp: new Date().toISOString(),\n          baseline: { msrp: baselineMsrp, otd: baselineOtd }, oemDelta: { msrpAbs, fromEventId: e.event_id },\n          appraisalAdj: adj, priceAction: { recommendedOtd: baselineOtd + adj, actionLabel: \"REPRICE_INVENTORY\" },\n          forecast: { leadLiftPct: 0.08, volumeLiftUnits: 5.2, grossImpactUsd: -6400 }, confidence: Math.min(0.95, e.confidence * 0.85)\n        } as any);\n      }\n    }\n  }\n  for (const im of impacts) {\n    await prisma.dealerModelImpact.create({ data: {\n      dealer_id: im.dealerId, model_id: im.modelId, timestamp: new Date(im.timestamp), baseline: im.baseline,\n      oem_delta: im.oemDelta ?? null, incentive_delta: null, appraisal_adj: im.appraisalAdj ?? null,\n      price_action: im.priceAction ?? null, forecast: im.forecast ?? null, confidence: im.confidence } });\n  }\n  return { impacts, runId: `imp_${Date.now()}` };\n}\n"
    },
    {
      "path": "lib/pulse/radar.ts",
      "content": "import { prisma } from \"@/lib/prisma\";\nimport { severityForMsrp } from \"./elasticity\";\nexport async function buildRadar(window: \"7d\"|\"14d\"|\"30d\" = \"7d\") {\n  const days = window === \"7d\" ? 7 : window === \"14d\" ? 14 : 30;\n  const since = new Date(Date.now() - days * 86400000);\n  const events = await prisma.marketEvent.findMany({ where: { effective_date: { gte: since } }, orderBy: { effective_date: \"desc\" } });\n  const alerts: any[] = [];\n  for (const e of events) {\n    if (e.type === \"OEM_MSRP_CHANGE\") {\n      const pct = Math.abs(e.delta_msrp_pct ?? 0); const sev = severityForMsrp(pct, true);\n      alerts.push({ type: e.type, oem: e.oem ?? undefined, models: e.models as string[], deltaMsrpAbs: e.delta_msrp_abs ?? undefined, severity: sev });\n    } else if (e.type === \"INCENTIVE_CHANGE\") {\n      const abs = (e.incentive as any)?.deltaRebateAbs ?? 0; const severity = abs >= 1500 ? \"P0\" : abs >= 500 ? \"P1\" : \"P2\";\n      alerts.push({ type: e.type, jurisdiction: (e.incentive as any)?.jurisdiction, severity });\n    } else if (e.type === \"DEMAND_SHOCK\") {\n      const pct = Math.abs((e.demand as any)?.deltaPct ?? 0); const severity = pct >= 0.4 ? \"P0\" : pct >= 0.2 ? \"P1\" : \"P2\";\n      alerts.push({ type: e.type, severity });\n    }\n  }\n  const affectedDealers = 42; const affectedModels = new Set(events.flatMap(e => e.models as string[])).size;\n  return { alerts, summary: { affectedDealers, affectedModels } };\n}\n"
    },
    {
      "path": "app/api/pulse/events/route.ts",
      "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { MarketEventZ } from \"@/lib/pulse/schemas\";\nimport { ingestEvents } from \"@/lib/pulse/service\";\nexport async function POST(req: NextRequest) {\n  const body = await req.json();\n  const arr = z.object({ events: z.array(MarketEventZ) }).safeParse(body);\n  if (!arr.success) return NextResponse.json({ ok:false, error: arr.error.format() }, { status: 400 });\n  const res = await ingestEvents(arr.data.events);\n  return NextResponse.json(res);\n}\n"
    },
    {
      "path": "app/api/pulse/impacts/compute/route.ts",
      "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport { computeImpacts } from \"@/lib/pulse/service\";\nexport async function POST(req: NextRequest) {\n  const body = await req.json();\n  const res = await computeImpacts(body ?? {});\n  return NextResponse.json(res);\n}\n"
    },
    {
      "path": "app/api/pulse/simulate/route.ts",
      "content": "import { NextRequest, NextResponse } from \"next/server\";\nimport { DEFAULT_ELASTICITY } from \"@/lib/pulse/elasticity\";\nexport async function POST(req: NextRequest) {\n  const { msrpDeltaAbs = 0, incentiveDeltaAbs = 0, lvpDeltaMin = 0, elasticity } = await req.json();\n  const el = { ...DEFAULT_ELASTICITY, ...(elasticity || {}) };\n  const priceLift = -(msrpDeltaAbs * el.priceElasticity);\n  const incLift = (incentiveDeltaAbs * el.incentiveElasticity) / 1000;\n  const speedLift = (lvpDeltaMin / 10) * el.speedElasticity;\n  const leadLiftPct = Number((0.02 + (priceLift + incLift + speedLift) / 10000).toFixed(3));\n  const volumeLiftUnits = Math.max(0, Number((leadLiftPct * 65).toFixed(1)));\n  const grossImpactUsd = Number((-(msrpDeltaAbs * 0.2) * volumeLiftUnits).toFixed(0));\n  return NextResponse.json({ forecast: { leadLiftPct, volumeLiftUnits, grossImpactUsd, ci95: [-(0.2*volumeLiftUnits), (0.2*volumeLiftUnits)] }, recommendedAction: \"REPRICE_INVENTORY\" });\n}\n"
    },
    {
      "path": "components/pulse/MacroPulsePanel.tsx",
      "content": "\"use client\";\nimport { useState } from \"react\";\nexport default function MacroPulsePanel({ events = [], radar = { alerts: [], summary: { affectedDealers: 0, affectedModels: 0 } }, impacts = [], onSimulate = async()=>({}), onApplyAction = async()=>{} }) {\n  const [dealerId, setDealer] = useState(\"dea_demo_1\");\n  const [modelId, setModel] = useState(\"model3\");\n  const [msrpDeltaAbs, setDelta] = useState(-5000);\n  return (\n    <div className=\"space-y-6\">\n      <section className=\"rounded-2xl p-4 border border-slate-800 bg-slate-900/60\">\n        <div className=\"text-lg font-semibold text-slate-200\">Macro Market Pulse</div>\n        <ul className=\"mt-2 text-sm text-slate-300\">\n          {events.map((e:any, i:number)=>(<li key={i}>• {(e.oem ?? e.type)}: {e.narrative ?? \"—\"}</li>))}\n        </ul>\n      </section>\n      <section className=\"rounded-2xl p-4 border border-slate-800 bg-slate-900/60\">\n        <div className=\"font-medium text-slate-200\">Radar</div>\n        <div className=\"text-sm text-slate-400\">Affected dealers: {radar.summary.affectedDealers} • models: {radar.summary.affectedModels}</div>\n      </section>\n      <section className=\"rounded-2xl p-4 border border-slate-800 bg-slate-900/60\">\n        <div className=\"font-medium text-slate-200 mb-2\">Quick Simulator</div>\n        <div className=\"flex items-center gap-2\">\n          <input className=\"border p-2 rounded bg-slate-800 text-slate-200\" value={dealerId} onChange={e=>setDealer(e.target.value)} />\n          <input className=\"border p-2 rounded bg-slate-800 text-slate-200\" value={modelId} onChange={e=>setModel(e.target.value)} />\n          <input type=\"number\" className=\"border p-2 rounded bg-slate-800 text-slate-200 w-36\" value={msrpDeltaAbs} onChange={e=>setDelta(+e.target.value)} />\n          <button className=\"px-3 py-2 rounded bg-blue-600 text-white\" onClick={async()=>{ await onSimulate({ dealerId, modelId, msrpDeltaAbs }); }}>Simulate</button>\n        </div>\n      </section>\n      <section className=\"rounded-2xl p-4 border border-slate-800 bg-slate-900/60\">\n        <div className=\"font-medium text-slate-200 mb-2\">Impacts</div>\n        <table className=\"w-full text-sm\">\n          <thead><tr className=\"text-slate-400\"><th className=\"text-left\">Dealer</th><th>Model</th><th>Adj</th><th>Action</th><th></th></tr></thead>\n          <tbody>\n            {impacts.map((im:any, i:number)=> (\n              <tr key={i} className=\"border-t border-slate-800 text-slate-300\">\n                <td>{im.dealerId}</td><td>{im.modelId}</td><td>{im.appraisalAdj}</td><td>{im.priceAction?.actionLabel}</td>\n                <td><button className=\"px-2 py-1 rounded border border-slate-700\" onClick={()=>onApplyAction(im.modelId)}>Apply</button></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "components/ScenarioSimulatorPanel.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport { FlaskConical, TrendingUp } from \"lucide-react\";\nexport default function ScenarioSimulatorPanel() {\n  const [inputs, setInputs] = useState({ schema: 0, ugc: 0, content: 0 });\n  const [forecast, setForecast] = useState<any[]>([]);\n  const [gain, setGain] = useState<number | null>(null);\n  function runScenario() {\n    const baseARR = 2_800_000;\n    const improvement = inputs.schema * 0.4 + inputs.ugc * 0.35 + inputs.content * 0.25;\n    const monthly = Array.from({ length: 6 }).map((_, i) => ({ month: `+${i+1}M`, ARR: Math.round(baseARR * Math.pow(1 + improvement/100, i+1)) }));\n    setForecast(monthly); setGain(monthly[5].ARR - baseARR);\n  }\n  const sliders = [\n    { label: \"Schema Coverage Δ (%)\", key: \"schema\", color: \"blue\" },\n    { label: \"UGC Health Δ (%)\", key: \"ugc\", color: \"green\" },\n    { label: \"Content Quality Δ (%)\", key: \"content\", color: \"purple\" }\n  ] as const;\n  return (\n    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }} className=\"bg-slate-900/80 border border-slate-800 p-6 rounded-2xl shadow-lg\">\n      <CardHeader className=\"flex items-center gap-2 mb-4\">\n        <FlaskConical className=\"text-amber-400 w-5 h-5\" />\n        <CardTitle>Strategic Scenario Simulator</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <p className=\"text-slate-400 text-sm\">Adjust optimization levers below to test hypothetical improvements.</p>\n        {sliders.map((s) => (\n          <div key={s.key}>\n            <div className=\"flex justify-between text-sm text-slate-300\">\n              <span>{s.label}</span>\n              <span className={`text-${s.color}-400 font-semibold`}>{inputs[s.key]}%</span>\n            </div>\n            <Slider value={[inputs[s.key]]} max={20} step={1} onValueChange={(v)=> setInputs({ ...inputs, [s.key]: v[0] })} />\n          </div>\n        ))}\n        <Button onClick={runScenario} className=\"bg-blue-600 hover:bg-blue-700\">Run Simulation</Button>\n        {forecast.length > 0 && (\n          <>\n            <div className=\"mt-6 bg-slate-800/60 border border-slate-700 rounded-xl p-4\">\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <LineChart data={forecast}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"ARR\" stroke=\"#22c55e\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"text-slate-300 text-sm mt-4 flex items-center gap-1\">\n              <TrendingUp className=\"w-4 h-4 text-green-400\" />\n              <span>Projected ARR Gain:&nbsp;<span className=\"text-green-400 font-semibold\">+${gain?.toLocaleString()}</span></span>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </motion.div>\n  );\n}\n"
    },
    {
      "path": "app/(dashboard)/orchestrator/OrchestratorCommandCenter.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport ScenarioSimulatorPanel from \"@/components/ScenarioSimulatorPanel\";\nimport MacroPulsePanel from \"@/components/pulse/MacroPulsePanel\";\nimport { Activity, LineChart, ShieldCheck, FlaskConical } from \"lucide-react\";\nexport default function OrchestratorCommandCenter() {\n  const [activeTab, setActiveTab] = useState<\"ai\"|\"asr\"|\"plugin\"|\"cohort\"|\"forecast\"|\"scenario\">(\"scenario\");\n  const tabs = [\n    { key: \"ai\", label: \"AI Health\", icon: <Activity className=\"w-4 h-4\"/> },\n    { key: \"asr\", label: \"ASR Intelligence\", icon: <ShieldCheck className=\"w-4 h-4\"/> },\n    { key: \"plugin\", label: \"Plugin Health\", icon: <LineChart className=\"w-4 h-4\"/> },\n    { key: \"scenario\", label: \"Scenario Simulator\", icon: <FlaskConical className=\"w-4 h-4\"/> }\n  ] as const;\n  return (\n    <div className=\"p-6 space-y-6 text-white\">\n      <div className=\"flex gap-2\">\n        {tabs.map(t => (\n          <button key={t.key} onClick={()=>setActiveTab(t.key as any)} className={`px-3 py-2 rounded border ${activeTab===t.key?\"bg-blue-600\":\"border-slate-700\"}`}>{t.icon} <span className=\"ml-1\">{t.label}</span></button>\n        ))}\n      </div>\n      {activeTab === \"scenario\" && <ScenarioSimulatorPanel />}\n      {activeTab === \"ai\" && <div className=\"text-slate-300\">AI Health – hook in your widget here.</div>}\n      {activeTab === \"plugin\" && <div className=\"text-slate-300\">Plugin Health – hook in your widget here.</div>}\n      {activeTab === \"asr\" && <MacroPulsePanel />}\n    </div>\n  );\n}\n"
    },
    {
      "path": "backend/automation/QuarterlyAutoPlanner.ts",
      "content": "import cron from \"node-cron\";\n// stubs for your real services\nasync function runScenarioOptimizer(){ return [{ schema: 8, ugc: 6, content: 4, projectedARR: 3150000, confidence: 0.82 }]; }\nasync function generateExecutivePDF(_:any){ return { blob: new Blob([\"Quarterly Plan\"])}; }\nasync function emailExecutiveReport(_:Blob, __:string[]){ return true; }\n\ncron.schedule(\"0 8 1 1,4,7,10 *\", async () => {\n  const results = await runScenarioOptimizer();\n  const topPlan = results[0];\n  const report = { baseARR: 2_800_000, expectedARR: topPlan.projectedARR, uplift: topPlan.projectedARR - 2_800_000 };\n  const { blob } = await generateExecutivePDF(report);\n  await emailExecutiveReport(blob, [\"gm@example.com\"]);\n  // TODO: persist JSON log and enqueue agent tasks\n  console.log(\"Quarterly plan sent\", report);\n});\n"
    }
  ],
  "instructions": [
    "pnpm install",
    "pnpm prisma migrate dev -n \"pulse_events_impacts\"",
    "pnpm dev"
  ]
}