/**
 * Clerk Configuration for DealershipAI
 * Handles authentication and user management
 */

import { auth } from '@clerk/nextjs/server';
import { NextRequest } from 'next/server';

// Clerk middleware configuration
export const clerkAuthMiddleware = null; // Deprecated - use middleware.ts instead

/**
 * Get authentication info from request
 */
export function getAuthInfo(req: NextRequest) {
  const authData = auth();
  const userId = authData.userId;
  const sessionId = authData.sessionId;
  const orgId = authData.orgId;

  return {
    isAuthenticated: !!userId,
    userId,
    sessionId,
    orgId,
    // Add DealershipAI specific user context
    tenantId: orgId || userId, // Use orgId for multi-tenant, fallback to userId
  };
}

/**
 * Check if user has required role
 */
export function hasRole(user: any, requiredRole: string): boolean {
  if (!user) return false;
  
  // Check user's role from metadata
  const userRole = user.publicMetadata?.role || user.privateMetadata?.role;
  return userRole === requiredRole;
}

/**
 * Check if user has required permission
 */
export function hasPermission(user: any, permission: string): boolean {
  if (!user) return false;
  
  const permissions = user.publicMetadata?.permissions || [];
  return permissions.includes(permission);
}

/**
 * Get user's accessible tenants
 */
export function getAccessibleTenants(user: any): string[] {
  if (!user) return [];
  
  // SuperAdmin can access all tenants
  if (hasRole(user, 'superadmin')) {
    return ['*']; // Special marker for all tenants
  }
  
  // Enterprise Admin can access their organization's tenants
  if (hasRole(user, 'enterprise_admin')) {
    return user.organizationMemberships?.map((org: any) => org.organization.id) || [];
  }
  
  // Dealership Admin and User can only access their own tenant
  return [user.tenantId || user.id];
}

/**
 * Clerk webhook handler for user events
 */
export const clerkWebhookHandler = {
  async userCreated(user: any) {
    // Create user in your database
    console.log('User created:', user.id);
    
    // Set default role and permissions
    const defaultRole = 'user';
    const defaultPermissions = ['read:own_data'];
    
    // Update user metadata
    // await clerkClient.users.updateUserMetadata(user.id, {
    //   publicMetadata: {
    //     role: defaultRole,
    //     permissions: defaultPermissions,
    //   }
    // });
  },
  
  async userUpdated(user: any) {
    // Update user in your database
    console.log('User updated:', user.id);
  },
  
  async userDeleted(user: any) {
    // Handle user deletion
    console.log('User deleted:', user.id);
  },
  
  async organizationCreated(org: any) {
    // Create organization in your database
    console.log('Organization created:', org.id);
  },
  
  async organizationUpdated(org: any) {
    // Update organization in your database
    console.log('Organization updated:', org.id);
  },
  
  async organizationDeleted(org: any) {
    // Handle organization deletion
    console.log('Organization deleted:', org.id);
  },
};

/**
 * Express.js integration example
 */
export function createClerkExpressApp() {
  const express = require('express');
  const app = express();
  
  // Apply Clerk middleware
  app.use(clerkAuthMiddleware);
  
  // Protected route example
  app.get('/api/user', (req: any, res: any) => {
    const { isAuthenticated, userId, tenantId } = getAuthInfo(req);
    
    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User not authenticated' });
    }
    
    res.json({ 
      userId, 
      tenantId,
      message: 'User authenticated successfully' 
    });
  });
  
  // Role-based route example
  app.get('/api/admin', (req: any, res: any) => {
    const { isAuthenticated, userId } = getAuthInfo(req);
    
    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User not authenticated' });
    }
    
    // Check if user has admin role
    // const user = await clerkClient.users.getUser(userId);
    // if (!hasRole(user, 'superadmin') && !hasRole(user, 'enterprise_admin')) {
    //   return res.status(403).json({ error: 'Insufficient permissions' });
    // }
    
    res.json({ message: 'Admin access granted' });
  });
  
  return app;
}

/**
 * Next.js API route integration
 */
export function withClerkAuth(handler: Function) {
  return async (req: any, res: any) => {
    const { isAuthenticated, userId, tenantId } = getAuthInfo(req);

    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User not authenticated' });
    }

    // Add auth info to request
    req.auth = { userId, tenantId, isAuthenticated };

    return handler(req, res);
  };
}

/**
 * Role-based access control decorator
 */
export function requireRole(role: string) {
  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;
    
    descriptor.value = async function(req: any, res: any) {
      const { isAuthenticated, userId } = getAuthInfo(req);
      
      if (!isAuthenticated) {
        return res.status(401).json({ error: 'User not authenticated' });
      }
      
      // Check user role
      // const user = await clerkClient.users.getUser(userId);
      // if (!hasRole(user, role)) {
      //   return res.status(403).json({ error: `Role '${role}' required` });
      // }
      
      return originalMethod.call(this, req, res);
    };
    
    return descriptor;
  };
}
