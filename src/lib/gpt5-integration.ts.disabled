// GPT-5 Integration for DealershipAI Algorithmic Visibility Index
// Connects OpenAI GPT-5 reasoning with proprietary AIV‚Ñ¢, ATI‚Ñ¢, CRS, and Elasticity models
// ¬© 2025 DealershipAI Inc. All rights reserved.

import OpenAI from "openai";

const client = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY 
});

export interface GPT5AnalysisRequest {
  tenantId: string;
  instructions: string;
  reasoningEffort: 'low' | 'medium' | 'high';
  metadata?: Record<string, any>;
  attachments?: Array<{
    type: 'openapi' | 'file' | 'url';
    url?: string;
    content?: string;
  }>;
}

export interface GPT5AnalysisResponse {
  output_text: string;
  reasoning: string;
  metrics: {
    aiv?: number;
    ati?: number;
    crs?: number;
    elasticity?: number;
    confidence?: number;
  };
  recommendations: string[];
  status: 'success' | 'error';
  error?: string;
}

export interface DealershipAIMetrics {
  aiv: number;
  ati: number;
  crs: number;
  elasticity: number;
  rSquared: number;
  confidenceInterval: [number, number];
  regime: 'Normal' | 'Shift Detected' | 'Quarantine';
  shapDrivers: {
    aiv: Array<{ feature: string; impact: number; direction: 'positive' | 'negative' }>;
    ati: Array<{ feature: string; impact: number; direction: 'positive' | 'negative' }>;
  };
  regionalMetrics: {
    region: string;
    multiplier: number;
    adjustedAIV: number;
    adjustedATI: number;
  }[];
}

/**
 * Compute AIV/ATI/CRS/Elasticity using GPT-5 reasoning
 */
export async function computeMetricsWithGPT5(
  request: GPT5AnalysisRequest
): Promise<GPT5AnalysisResponse> {
  try {
    console.log(`ü§ñ Starting GPT-5 analysis for tenant ${request.tenantId}...`);

    // Create the GPT-5 run with reasoning
    const run = await client.responses.create({
      model: "gpt-5",
      input: request.instructions, // Required field
      reasoning: { effort: request.reasoningEffort },
      instructions: request.instructions,
      metadata: {
        tenantId: request.tenantId,
        ...request.metadata
      }
      // attachments field not supported in current API version
    });

    console.log(`‚úÖ GPT-5 analysis completed for tenant ${request.tenantId}`);

    // Parse the response for metrics and recommendations
    const analysis = parseGPT5Response(run.output_text);

    return {
      output_text: run.output_text,
      reasoning: typeof run.reasoning === 'string' ? run.reasoning : JSON.stringify(run.reasoning) || 'No reasoning provided',
      metrics: analysis.metrics,
      recommendations: analysis.recommendations,
      status: 'success'
    };

  } catch (error) {
    console.error(`‚ùå GPT-5 analysis failed for tenant ${request.tenantId}:`, error);
    
    return {
      output_text: '',
      reasoning: '',
      metrics: {},
      recommendations: [],
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Parse GPT-5 response to extract metrics and recommendations
 */
function parseGPT5Response(outputText: string): {
  metrics: Record<string, any>;
  recommendations: string[];
} {
  try {
    // Look for JSON blocks in the response
    const jsonMatch = outputText.match(/```json\n([\s\S]*?)\n```/);
    if (jsonMatch) {
      const parsed = JSON.parse(jsonMatch[1]);
      return {
        metrics: parsed.metrics || {},
        recommendations: parsed.recommendations || []
      };
    }

    // Fallback: extract metrics using regex patterns
    const metrics: Record<string, any> = {};
    const recommendations: string[] = [];

    // Extract AIV score
    const aivMatch = outputText.match(/AIV[‚Ñ¢]?[:\s]*(\d+(?:\.\d+)?)/i);
    if (aivMatch) metrics.aiv = parseFloat(aivMatch[1]);

    // Extract ATI score
    const atiMatch = outputText.match(/ATI[‚Ñ¢]?[:\s]*(\d+(?:\.\d+)?)/i);
    if (atiMatch) metrics.ati = parseFloat(atiMatch[1]);

    // Extract CRS score
    const crsMatch = outputText.match(/CRS[:\s]*(\d+(?:\.\d+)?)/i);
    if (crsMatch) metrics.crs = parseFloat(crsMatch[1]);

    // Extract Elasticity
    const elasticityMatch = outputText.match(/Elasticity[:\s]*\$?(\d+(?:,\d+)*(?:\.\d+)?)/i);
    if (elasticityMatch) {
      metrics.elasticity = parseFloat(elasticityMatch[1].replace(/,/g, ''));
    }

    // Extract confidence
    const confidenceMatch = outputText.match(/Confidence[:\s]*(\d+(?:\.\d+)?)%?/i);
    if (confidenceMatch) metrics.confidence = parseFloat(confidenceMatch[1]);

    // Extract recommendations (look for bullet points or numbered lists)
    const recMatches = outputText.match(/(?:^|\n)[\s]*[-*‚Ä¢]\s*(.+)/gm);
    if (recMatches) {
      recommendations.push(...recMatches.map(match => match.replace(/^[\s]*[-*‚Ä¢]\s*/, '').trim()));
    }

    return { metrics, recommendations };

  } catch (error) {
    console.error('Error parsing GPT-5 response:', error);
    return { metrics: {}, recommendations: [] };
  }
}

/**
 * Get comprehensive DealershipAI metrics for GPT-5 analysis
 */
export async function getDealershipAIMetrics(tenantId: string): Promise<DealershipAIMetrics> {
  try {
    // This would typically fetch from your database
    // For now, return demo data that matches your proprietary models
    
    const metrics: DealershipAIMetrics = {
      aiv: 79.2,
      ati: 81.3,
      crs: 80.25,
      elasticity: 5000,
      rSquared: 0.85,
      confidenceInterval: [4200, 5800],
      regime: 'Normal',
      shapDrivers: {
        aiv: [
          { feature: 'AEO Score', impact: 25.5, direction: 'positive' },
          { feature: 'SEO Score', impact: 19.5, direction: 'positive' },
          { feature: 'GEO Score', impact: 18.0, direction: 'positive' },
          { feature: 'UGC Score', impact: 6.8, direction: 'positive' },
          { feature: 'Clarity Layer', impact: 5.2, direction: 'positive' }
        ],
        ati: [
          { feature: 'Review Legitimacy', impact: 18.75, direction: 'positive' },
          { feature: 'Schema Consistency', impact: 17.6, direction: 'positive' },
          { feature: 'Topical Authority', impact: 16.4, direction: 'positive' },
          { feature: 'Source Credibility', impact: 12.75, direction: 'positive' },
          { feature: 'Fraud Guard', impact: 8.5, direction: 'positive' }
        ]
      },
      regionalMetrics: [
        { region: 'US', multiplier: 1.0, adjustedAIV: 79.2, adjustedATI: 81.3 },
        { region: 'CA', multiplier: 0.95, adjustedAIV: 75.2, adjustedATI: 77.2 },
        { region: 'UK', multiplier: 0.90, adjustedAIV: 71.3, adjustedATI: 73.2 },
        { region: 'AU', multiplier: 0.85, adjustedAIV: 67.3, adjustedATI: 69.1 }
      ]
    };

    return metrics;

  } catch (error) {
    console.error('Error fetching DealershipAI metrics:', error);
    throw error;
  }
}

/**
 * Create comprehensive instructions for GPT-5 analysis
 */
export function createGPT5Instructions(
  tenantId: string,
  analysisType: 'comprehensive' | 'aiv' | 'ati' | 'elasticity' | 'shap' = 'comprehensive'
): string {
  const baseInstructions = `
You are DealershipAI's proprietary Algorithmic Visibility Index‚Ñ¢ strategist. 
Analyze the provided metrics and provide actionable insights.

TENANT: ${tenantId}
ANALYSIS TYPE: ${analysisType}

PROPRIETARY MODELS:
- AIV‚Ñ¢ (Algorithmic Visibility Index): SEO .25 + AEO .30 + GEO .25 + UGC .10 + GeoLocal .05
- ATI‚Ñ¢ (Algorithmic Trust Index): Schema + Reviews + Authority + Credibility with fraud protection
- CRS (Composite Reputation Score): Bayesian fusion of AIV and ATI
- Elasticity: ŒîRaR / ŒîAIV with 8-week rolling regression

REQUIREMENTS:
1. Compute and validate all metrics
2. Identify top 5 SHAP drivers for optimization
3. Provide specific, actionable recommendations
4. Include confidence intervals and R¬≤ validation
5. Flag any regime changes (Normal/Shift Detected/Quarantine)
6. Regionalize insights for US, CA, UK, AU markets

OUTPUT FORMAT:
```json
{
  "metrics": {
    "aiv": 79.2,
    "ati": 81.3,
    "crs": 80.25,
    "elasticity": 5000,
    "confidence": 85
  },
  "recommendations": [
    "Specific actionable item 1",
    "Specific actionable item 2"
  ]
}
```

Focus on maximizing $ impact per +1 AIV point. All models are proprietary trade secrets.
`;

  switch (analysisType) {
    case 'aiv':
      return baseInstructions + '\n\nFOCUS: AIV‚Ñ¢ optimization and visibility drivers.';
    case 'ati':
      return baseInstructions + '\n\nFOCUS: ATI‚Ñ¢ trust factors and credibility enhancement.';
    case 'elasticity':
      return baseInstructions + '\n\nFOCUS: Elasticity analysis and revenue impact optimization.';
    case 'shap':
      return baseInstructions + '\n\nFOCUS: SHAP driver analysis and feature importance.';
    default:
      return baseInstructions;
  }
}

/**
 * Example usage function
 */
export async function runExampleAnalysis() {
  const tenantId = "123";
  
  const request: GPT5AnalysisRequest = {
    tenantId,
    instructions: createGPT5Instructions(tenantId, 'comprehensive'),
    reasoningEffort: 'medium',
    metadata: {
      analysisType: 'comprehensive',
      timestamp: new Date().toISOString()
    },
    attachments: [
      {
        type: "openapi",
        url: `${process.env.NEXT_PUBLIC_APP_URL}/api/openapi.json`
      }
    ]
  };

  const result = await computeMetricsWithGPT5(request);
  console.log('GPT-5 Analysis Result:', result);
  
  return result;
}

// Export the main function for use in API routes
export { computeMetricsWithGPT5 as default };
