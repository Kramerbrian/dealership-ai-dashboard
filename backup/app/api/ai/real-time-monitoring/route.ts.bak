import { NextRequest, NextResponse } from 'next/server';
import { RealTimeMonitoringService } from '@/lib/ai/real-time-monitoring';

export async function POST(req: NextRequest) {
  try {
    const { dealership, action } = await req.json();

    if (!dealership) {
      return NextResponse.json({ error: 'Dealership is required' }, { status: 400 });
    }

    // Initialize the real-time monitoring service
    const monitoringService = new RealTimeMonitoringService();

    if (action === 'start') {
      // Start monitoring for the dealership
      await monitoringService.startMonitoring(dealership);
      
      return NextResponse.json({
        success: true,
        message: 'Real-time monitoring started',
        timestamp: new Date().toISOString()
      });
    } else if (action === 'stop') {
      // Stop monitoring for the dealership
      // Implementation would depend on the service architecture
      
      return NextResponse.json({
        success: true,
        message: 'Real-time monitoring stopped',
        timestamp: new Date().toISOString()
      });
    } else {
      // Get real-time monitoring data
      const monitoringData = await monitoringService.getRealTimeData(dealership);

      return NextResponse.json({
        success: true,
        monitoring: monitoringData,
        timestamp: new Date().toISOString()
      });
    }

  } catch (error: any) {
    console.error('Real-time monitoring error:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to perform real-time monitoring' },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const dealership = searchParams.get('dealership');

    if (!dealership) {
      return NextResponse.json({ error: 'Dealership parameter is required' }, { status: 400 });
    }

    // Initialize the real-time monitoring service
    const monitoringService = new RealTimeMonitoringService();

    // Get real-time monitoring data
    const monitoringData = await monitoringService.getRealTimeData(dealership);

    return NextResponse.json({
      success: true,
      monitoring: monitoringData,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('Real-time monitoring error:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to get real-time monitoring data' },
      { status: 500 }
    );
  }
}
