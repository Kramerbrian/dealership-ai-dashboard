-- System Alerts Table for Automated Monitoring
-- Stores alerts generated by the monitoring system

CREATE TABLE IF NOT EXISTS system_alerts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  category TEXT NOT NULL, -- 'Model Performance', 'Cron Job', 'Fraud Detection', 'Success Criteria'
  severity TEXT NOT NULL, -- 'critical', 'warning', 'info'
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  metric TEXT, -- e.g., 'r2', 'rmse', 'consecutive_failures'
  value NUMERIC,
  threshold NUMERIC,
  action TEXT, -- Recommended action to resolve
  job_name TEXT, -- For cron job alerts
  details JSONB, -- Additional context
  acknowledged BOOLEAN DEFAULT FALSE,
  acknowledged_at TIMESTAMPTZ,
  acknowledged_by UUID,
  created_at TIMESTAMPTZ DEFAULT NOW(),

  INDEX idx_system_alerts_created (created_at),
  INDEX idx_system_alerts_severity (severity),
  INDEX idx_system_alerts_category (category),
  INDEX idx_system_alerts_acknowledged (acknowledged)
);

-- Row Level Security
ALTER TABLE system_alerts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Service role can manage alerts" ON system_alerts
  FOR ALL USING (auth.role() = 'service_role');

-- Function to get unacknowledged critical alerts
CREATE OR REPLACE FUNCTION get_unacknowledged_critical_alerts()
RETURNS TABLE (
  id UUID,
  category TEXT,
  title TEXT,
  message TEXT,
  action TEXT,
  created_at TIMESTAMPTZ,
  age_hours NUMERIC
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    a.id,
    a.category,
    a.title,
    a.message,
    a.action,
    a.created_at,
    ROUND(EXTRACT(EPOCH FROM (NOW() - a.created_at)) / 3600, 1) as age_hours
  FROM system_alerts a
  WHERE a.severity = 'critical'
    AND a.acknowledged = FALSE
  ORDER BY a.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- Function to acknowledge an alert
CREATE OR REPLACE FUNCTION acknowledge_alert(
  alert_id UUID,
  user_id UUID DEFAULT NULL
)
RETURNS BOOLEAN AS $$
BEGIN
  UPDATE system_alerts
  SET
    acknowledged = TRUE,
    acknowledged_at = NOW(),
    acknowledged_by = user_id
  WHERE id = alert_id;

  RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Function to get alert summary by category and severity
CREATE OR REPLACE FUNCTION get_alert_summary(hours_ago INTEGER DEFAULT 24)
RETURNS TABLE (
  category TEXT,
  severity TEXT,
  count BIGINT,
  latest_alert TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    a.category,
    a.severity,
    COUNT(*) as count,
    MAX(a.created_at) as latest_alert
  FROM system_alerts a
  WHERE a.created_at >= NOW() - (hours_ago || ' hours')::INTERVAL
  GROUP BY a.category, a.severity
  ORDER BY
    CASE a.severity
      WHEN 'critical' THEN 1
      WHEN 'warning' THEN 2
      ELSE 3
    END,
    count DESC;
END;
$$ LANGUAGE plpgsql;

COMMENT ON TABLE system_alerts IS 'Automated alerts generated by the monitoring system for model performance, cron jobs, and anomalies';
COMMENT ON FUNCTION get_unacknowledged_critical_alerts() IS 'Returns all unacknowledged critical alerts with their age';
COMMENT ON FUNCTION acknowledge_alert(UUID, UUID) IS 'Marks an alert as acknowledged by a specific user';
COMMENT ON FUNCTION get_alert_summary(INTEGER) IS 'Returns summary of alerts grouped by category and severity for the last N hours';
