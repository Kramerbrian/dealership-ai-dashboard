{
  "project": "DealershipAI_QAI_Master_Prompt",
  "version": "5.0",
  "summary": "Comprehensive QAI (Quantum Authority Index) master prompt system consolidating all AI visibility analytics, VDP optimization, and prescriptive action recommendations for automotive dealerships.",
  "tech_stack": {
    "core_engine": "QAI* v4.0 with XGBClassifier ML model",
    "explainability": "SHAP attribution analysis",
    "integration": "VDP-TOP + AEMD + QAI unified system",
    "ui_theme": "Apple Park White Mode (SF Pro Display)",
    "data_sources": "PostgreSQL + Supabase + Redis caching"
  },
  "qai_system_architecture": {
    "core_metrics": {
      "qai_star_score": {
        "formula": "QAI_Final = [(SEO*0.3)+(VAI_Penalized*0.7)]*(1+λ_A)-(HRP*W_HRP)",
        "range": "0-100",
        "target": "≥86",
        "description": "Final QAI* score combining all authority factors"
      },
      "authority_velocity": {
        "formula": "λ_A = (Score_Current - Score_LastWeek) / Score_LastWeek",
        "target": ">5%",
        "description": "Growth rate of authority signals"
      },
      "vai_score": {
        "formula": "Weighted visibility across platforms / PIQR_Score",
        "platforms": ["Google: 0.50", "ChatGPT: 0.30", "Bing: 0.15", "Perplexity: 0.05"],
        "description": "Risk-adjusted Visibility Authority Index"
      },
      "piqr_score": {
        "formula": "(1 + Σ ComplianceFails * W_C) * Π M_Warning",
        "description": "Proactive Inventory Quality Radar - compliance penalty system"
      },
      "hrp_score": {
        "formula": "((Total - Verifiable) / Total) * (1 + SeverityMultiplier)",
        "description": "Hallucination Risk Penalty - content verifiability"
      },
      "oci_value": {
        "formula": "0.05 * GrossProfit * GapInCGS * 10",
        "description": "Opportunity Cost Index - revenue at risk"
      },
      "aemd_score": {
        "formula": "(FS*0.4 + AIO*0.4 + PAA*0.2) / DefensiveWeight * 100",
        "description": "Answer Engine Market Dominance"
      }
    },
    "ml_engine": {
      "model": "XGBClassifier",
      "explainability": "SHAP",
      "training_trigger": {
        "weekly": true,
        "min_new_vdps": 10000,
        "retrain_on_auc_drop": 0.03
      },
      "performance_targets": {
        "auc": "≥0.85",
        "accuracy": "≥0.82",
        "precision": "≥0.81",
        "recall": "≥0.82",
        "f1_score": "≥0.82"
      }
    }
  },
  "prompt_families": {
    "data_validation": {
      "priority": 1,
      "prompts": [
        {
          "id": "dataset_integrity_validator",
          "goal": "Ensure all uploaded datasets are validated and standardized before hitting the model",
          "prompt": "Inspect uploaded GEO, AEO, UGC, and sales datasets. Validate columns, data types, date ranges, and null counts. Output a JSON report with: {dataset_name, completeness%, anomaly_count, suggested_fixes}. Flag any dataset whose RMSE(AIV vs observed) > 3.0 or coverage < 90%.",
          "benchmark_targets": {
            "rmse_threshold": 3.0,
            "coverage_threshold": 90.0,
            "completeness_threshold": 95.0
          }
        }
      ]
    },
    "model_optimization": {
      "priority": 2,
      "prompts": [
        {
          "id": "aiv_weight_drift_detector",
          "goal": "Measure and correct weekly parameter drift in AIV pillar weights",
          "prompt": "Compare current week's AIV pillar weights to prior 8-week rolling average. Compute Δweight_i, σ_i, and drift_ratio = |Δ|/σ. Output flagged pillars where drift_ratio > 2. Recommend corrective reweighting and expected ΔRMSE if applied.",
          "benchmark_targets": {
            "drift_ratio_threshold": 2.0,
            "rmse_improvement_target": 0.5,
            "stability_score_target": 0.8
          }
        }
      ]
    },
    "predictive_analytics": {
      "priority": 3,
      "prompts": [
        {
          "id": "aiv_predictive_forecast",
          "goal": "Extend the dashboard with forward-looking AIV+ forecasts using Kalman-smoothed predictions",
          "prompt": "Using 8-week historical AIV and RaR data, run a Kalman-smoothed forecast for next 4 weeks. Output predicted AIV_mean, CI95, and expected RaR reduction ($). Include trend classification: {growth, stable, decline}.",
          "benchmark_targets": {
            "forecast_rmse": 3.0,
            "trend_accuracy": 0.8,
            "confidence_calibration": 0.95
          }
        },
        {
          "id": "aiv_causal_summary",
          "goal": "Generate human-readable causal explanations for metric changes using SHAP attribution",
          "prompt": "Given AIV history and pillar metrics, perform SHAP attribution to identify top 5 drivers of last week's ΔAIV. For each driver, describe: effect_size, direction, and actionable optimization (≤30 words). Output JSON {driver, ΔAIV%, causal_strength, recommendation}.",
          "benchmark_targets": {
            "attribution_accuracy": 0.85,
            "recommendation_relevance": 0.9,
            "explanation_clarity": 0.8
          }
        }
      ]
    },
    "financial_modeling": {
      "priority": 4,
      "prompts": [
        {
          "id": "roi_scenario_simulator",
          "goal": "Simulate ROI outcomes from planned actions and interventions",
          "prompt": "Simulate elasticity($/pt) under 3 interventions: +3 SCS, +5 SCR, +2 SIS. Estimate ΔRaR, ROI%, and payback period for each. Output comparative table sorted by $Impact ÷ Effort.",
          "benchmark_targets": {
            "roi_accuracy": 0.8,
            "payback_accuracy": 0.75,
            "scenario_ranking_accuracy": 0.85
          }
        }
      ]
    },
    "regional_optimization": {
      "priority": 5,
      "prompts": [
        {
          "id": "regional_weight_optimizer",
          "goal": "Adapt dashboard metrics to region-specific search ecosystems and local market characteristics",
          "prompt": "Re-estimate GEO and UGC weights using regional datasets (US, CA, UK, AU). For each region output weight vector, R², and primary local review sources. Highlight any variance >20% between regions.",
          "benchmark_targets": {
            "r2_improvement": 0.1,
            "variance_threshold": 20.0,
            "localization_accuracy": 0.85
          }
        }
      ]
    },
    "trust_security": {
      "priority": 6,
      "prompts": [
        {
          "id": "fraudguard_audit",
          "goal": "Maintain data trust layer by detecting fraudulent reviews and anomalous patterns",
          "prompt": "Analyze weekly review data for velocity spikes (>4σ) and sentiment anomalies. Return flagged dealership IDs, anomaly_type, and fraud_probability. Compute FraudGuard penalty = 1 – fraud_probability.",
          "benchmark_targets": {
            "fraud_detection_accuracy": 0.95,
            "false_positive_rate": 0.05,
            "data_trust_threshold": 0.9
          }
        }
      ]
    },
    "user_analytics": {
      "priority": 7,
      "prompts": [
        {
          "id": "dashboard_usage_insights",
          "goal": "Optimize dashboard engagement and identify high-value features",
          "prompt": "Analyze user interaction patterns, feature usage, and engagement metrics. Identify top-performing dashboard components and recommend UX improvements. Output insights for product optimization.",
          "benchmark_targets": {
            "engagement_improvement": 0.25,
            "feature_adoption_rate": 0.8,
            "user_satisfaction": 0.85
          }
        }
      ]
    },
    "meta_optimization": {
      "priority": 8,
      "prompts": [
        {
          "id": "prompt_benchmark_runner",
          "goal": "Meta-optimize GPT performance and prompt accuracy",
          "prompt": "Run A/B tests on prompt variations, measure accuracy deltas, and identify optimal prompt configurations. Track performance metrics and recommend prompt improvements.",
          "benchmark_targets": {
            "prompt_accuracy_improvement": 0.15,
            "response_consistency": 0.9,
            "cost_efficiency": 0.2
          }
        }
      ]
    },
    "deployment": {
      "priority": 9,
      "prompts": [
        {
          "id": "cursor_prompt_packager",
          "goal": "Enable portable, versioned prompt library deployment",
          "prompt": "Package all QAI prompts into versioned, deployable format. Generate import instructions, dependency mapping, and execution workflows for Cursor integration.",
          "benchmark_targets": {
            "deployment_success_rate": 0.95,
            "version_control_accuracy": 0.98,
            "import_success_rate": 0.9
          }
        }
      ]
    }
  },
  "asr_system": {
    "description": "Autonomous Strategy Recommendation system for prescriptive actions",
    "action_types": [
      {
        "action": "Add Odometer Photo",
        "vco_impact": "15.2 SHAP Points",
        "estimated_gain": "$1,250",
        "cost": "$5",
        "roi": "24,900%",
        "protocol": "VDP-TOP Compliant"
      },
      {
        "action": "Rewrite VDP Text (TOP)",
        "vco_impact": "22.8 SHAP Points", 
        "estimated_gain": "$3,420",
        "cost": "$150",
        "roi": "2,180%",
        "protocol": "VDP-TOP Compliant"
      },
      {
        "action": "Add Master Technician Quote",
        "vco_impact": "8.5 SHAP Points",
        "estimated_gain": "$680",
        "cost": "$25",
        "roi": "2,620%",
        "protocol": "E-E-A-T Compliant"
      },
      {
        "action": "Add FAQ Schema",
        "vco_impact": "6.2 SHAP Points",
        "estimated_gain": "$420",
        "cost": "$75",
        "roi": "460%",
        "protocol": "Schema.org Compliant"
      }
    ],
    "feature_importance": {
      "Odometer_Photo_Binary": 0.25,
      "Deceptive_Price_Binary": 0.20,
      "Trust_Alpha": 0.15,
      "Expertise_Alpha": 0.12,
      "Photo_Count": 0.10,
      "Duplication_Rate": 0.08,
      "Competitive_CSGV": 0.06,
      "Gross_Profit": 0.04
    }
  },
  "execution_workflow": {
    "monthly_cycle": [
      "1. dataset_integrity_validator → validate all input data",
      "2. aiv_weight_drift_detector → recalibrate model weights",
      "3. aiv_predictive_forecast → generate 4-week forecasts",
      "4. aiv_causal_summary → identify key drivers and recommendations",
      "5. roi_scenario_simulator → model financial interventions",
      "6. regional_weight_optimizer → adapt to local markets",
      "7. fraudguard_audit → maintain data integrity",
      "8. dashboard_usage_insights → optimize user experience",
      "9. prompt_benchmark_runner → evaluate prompt performance",
      "10. cursor_prompt_packager → version and deploy updates"
    ],
    "real_time_cycle": [
      "dataset_integrity_validator (on data upload)",
      "fraudguard_audit (weekly)",
      "dashboard_usage_insights (daily aggregation)"
    ]
  },
  "ui_components": {
    "scoreboard": {
      "component": "ExecutiveScoreboard",
      "metrics": ["QAI* Score", "Authority Velocity", "OCI Value", "Competitive Position"],
      "theme": "Apple Park White Mode"
    },
    "asr_terminal": {
      "component": "PrescriptiveActionQueue",
      "features": ["Action Priority", "ROI Calculator", "Implementation Status", "Progress Tracking"],
      "theme": "Apple Park White Mode"
    },
    "heatmap": {
      "component": "DiagnosticSegmentView",
      "features": ["Feature Importance", "Risk Analysis", "Opportunity Mapping", "Trend Visualization"],
      "theme": "Apple Park White Mode"
    }
  },
  "integration_apis": {
    "vdp_top": {
      "description": "VDP-TOP protocol integration for content optimization",
      "endpoints": ["generateVDPTopContentWithAI", "validateVDPCompliance", "optimizeVDPContent"],
      "protocols": ["E-E-A-T Compliant", "Schema.org Compliant", "VDP-TOP Compliant"]
    },
    "aemd": {
      "description": "Answer Engine Market Dominance calculator",
      "endpoints": ["calculateAEMD", "analyzeCompetitivePosition", "generatePrescriptiveActions"],
      "metrics": ["FS Capture Share", "AIO Citation Share", "PAA Box Ownership"]
    },
    "qai_v4": {
      "description": "QAI* v4.0 calculation engine",
      "endpoints": ["calculateQAIMetrics", "generateASR", "getFeatureImportance", "generatePredictions"],
      "ml_model": "XGBClassifier with SHAP explainability"
    }
  },
  "benchmark_targets": {
    "overall_accuracy": 0.9,
    "latency_reduction": 0.3,
    "predictive_accuracy": 0.85,
    "roi_optimization": 0.8,
    "data_trust_score": 0.95,
    "qai_score_target": 86,
    "authority_velocity_target": 0.05,
    "fraud_detection_accuracy": 0.95
  },
  "cursor_integration": {
    "import_instructions": [
      "1. Store this file in /prompts/ directory",
      "2. Open Cursor command palette (Cmd+Shift+P)",
      "3. Select 'Prompt Library → Import JSON'",
      "4. Import qai_master_prompt.json",
      "5. Each prompt becomes an executable cell with version control"
    ],
    "execution_environment": {
      "required_directories": [
        "/prompts/",
        "/benchmarks/",
        "/data/training/",
        "/exports/",
        "/src/lib/",
        "/src/components/qai/"
      ],
      "data_sources": [
        "Postgres aiv_weekly",
        "Postgres elasticity_weekly",
        "Review databases",
        "User behavior logs",
        "App analytics logs",
        "VDP content database"
      ]
    }
  },
  "deployment_checklist": [
    "✅ QAI* v4.0 engine initialized",
    "✅ All 10 prompt families configured",
    "✅ Cursor-ready JSON format",
    "✅ Benchmark targets defined",
    "✅ Execution workflow documented",
    "✅ VDP-TOP integration complete",
    "✅ AEMD calculator integrated",
    "✅ ASR system operational",
    "✅ ML model training pipeline",
    "✅ UI components themed",
    "✅ Version control integrated",
    "✅ Export/import instructions provided"
  ],
  "expected_outcomes": {
    "autonomous_analytics": "Fully automated QAI calculation, VDP optimization, and prescriptive action generation",
    "continuous_learning": "Self-improving ML model with weekly retraining and SHAP explainability",
    "predictive_insights": "4-week QAI forecasts with confidence intervals and trend classification",
    "financial_optimization": "ROI scenario modeling with payback period analysis and cost-benefit optimization",
    "regional_adaptation": "Location-specific weight optimization for global automotive markets",
    "trust_security": "Automated fraud detection maintaining 95%+ data trust score",
    "user_optimization": "Dashboard engagement analytics driving UX improvements and feature adoption",
    "version_control": "Portable, versioned prompt library for easy deployment and rollback"
  },
  "success_metrics": {
    "qai_improvement": "Target: +15% MoM QAI* score gains",
    "latency_reduction": "Target: 30% faster processing",
    "predictive_precision": "Target: 85% forecast accuracy",
    "roi_optimization": "Target: 20% better ROI decisions",
    "data_trust": "Target: 95%+ trust score maintenance",
    "user_engagement": "Target: 25% increased dashboard usage",
    "asr_effectiveness": "Target: 80% action implementation rate",
    "ml_accuracy": "Target: 85%+ model accuracy with SHAP explainability"
  },
  "metadata": {
    "created": "2024-01-15T00:00:00Z",
    "author": "DealershipAI Team",
    "model_version": "QAI-v5.0-master",
    "training_data_version": "2024.01",
    "export_format": "cursor_prompt_library",
    "compatibility": "DealershipAI v5.0+",
    "last_updated": "2024-01-15T00:00:00Z"
  }
}
