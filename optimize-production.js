const fs = require('fs');
const path = require('path');

console.log('🚀 Optimizing DealershipAI for 100% Production Capacity...\n');

// 1. Fix all API routes with dynamic configuration
console.log('📝 Step 1: Adding dynamic configuration to API routes...');

const apiRoutesDir = path.join(process.cwd(), 'app', 'api');

function addDynamicConfig(filePath) {
  if (!fs.existsSync(filePath)) return false;
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Skip if already has dynamic config
  if (content.includes('export const dynamic')) return false;
  
  // Add dynamic config after imports
  const importEndRegex = /(import.*?from.*?;?\s*)+/;
  const match = content.match(importEndRegex);
  
  if (match) {
    const newContent = content.replace(
      match[0],
      match[0] + '\nexport const dynamic = \'force-dynamic\';\n'
    );
    
    fs.writeFileSync(filePath, newContent);
    console.log(`✅ Fixed ${path.relative(process.cwd(), filePath)}`);
    return true;
  }
  
  return false;
}

function processDirectory(dir) {
  let fixedCount = 0;
  
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(file => {
      const fullPath = path.join(dir, file);
      if (fs.statSync(fullPath).isDirectory()) {
        fixedCount += processDirectory(fullPath);
      } else if (file.endsWith('route.ts') || file.endsWith('route.js')) {
        if (addDynamicConfig(fullPath)) {
          fixedCount++;
        }
      }
    });
  }
  
  return fixedCount;
}

const fixedRoutes = processDirectory(apiRoutesDir);
console.log(`✅ Fixed ${fixedRoutes} API routes\n`);

// 2. Create production-ready environment configuration
console.log('📝 Step 2: Creating production environment configuration...');

const productionEnv = `# DealershipAI Production Environment Variables
# Generated by optimize-production.js

# Clerk Authentication (Production)
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_46lFcR07X8wbGi0k6nXBVTYUXaE5djeCsoqyuyiubl
CLERK_SECRET_KEY=sk_live_46lFcR07X8wbGi0k6nXBVTYUXaE5djeCsoqyuyiubl

# Clerk Redirect URLs
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/auth/signin
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/auth/signup
NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/dashboard

# Supabase (Production)
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Redis/Upstash (Production)
UPSTASH_REDIS_REST_URL=https://your-redis.upstash.io
UPSTASH_REDIS_REST_TOKEN=your-redis-token

# Stripe (Production)
STRIPE_SECRET_KEY=sk_live_your-stripe-secret-key
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_your-stripe-publishable-key
STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# Analytics
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
NEXT_PUBLIC_POSTHOG_KEY=phc_your-posthog-key

# Performance
NEXT_PUBLIC_VERCEL_ANALYTICS=true
`;

fs.writeFileSync('.env.production', productionEnv);
console.log('✅ Created .env.production template\n');

// 3. Create production-ready next.config.js optimizations
console.log('📝 Step 3: Optimizing Next.js configuration...');

const nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverComponentsExternalPackages: ['@clerk/nextjs']
  },
  
  // Performance optimizations
  images: {
    domains: ['images.unsplash.com', 'via.placeholder.com'],
    formats: ['image/webp', 'image/avif'],
  },
  
  // Security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
    ];
  },
  
  // Redirects for SEO
  async redirects() {
    return [
      {
        source: '/',
        destination: '/dashboard',
        permanent: false,
      },
    ];
  },
  
  // Bundle analyzer (optional)
  ...(process.env.ANALYZE === 'true' && {
    webpack: (config) => {
      config.plugins.push(
        new (require('@next/bundle-analyzer'))({
          enabled: true,
        })
      );
      return config;
    },
  }),
};

module.exports = nextConfig;
`;

fs.writeFileSync('next.config.js', nextConfig);
console.log('✅ Optimized next.config.js\n');

// 4. Create production deployment checklist
console.log('📝 Step 4: Creating production deployment checklist...');

const checklist = `# 🚀 DealershipAI Production Deployment Checklist

## ✅ Pre-Deployment Checklist

### Environment Variables
- [ ] Clerk production keys configured
- [ ] Supabase production database connected
- [ ] Redis/Upstash production instance active
- [ ] Stripe production keys configured
- [ ] Analytics tracking enabled

### Domain Configuration
- [ ] dealershipai.com added to Vercel
- [ ] dealershipai.com added to Clerk
- [ ] DNS records pointing to Vercel
- [ ] SSL certificate active

### Performance Optimization
- [ ] All API routes have dynamic configuration
- [ ] Images optimized for web
- [ ] Bundle size optimized
- [ ] Caching headers configured

### Security
- [ ] Authentication working
- [ ] Rate limiting active
- [ ] Security headers configured
- [ ] API endpoints protected

### Testing
- [ ] All dashboard features working
- [ ] Authentication flow tested
- [ ] API endpoints responding
- [ ] Mobile responsive

## 🚀 Deployment Commands

\`\`\`bash
# Build and test locally
npm run build
npm run start

# Deploy to production
npx vercel --prod

# Verify deployment
curl https://dealershipai.com/api/health
\`\`\`

## 📊 Post-Deployment Monitoring

- [ ] Vercel Analytics active
- [ ] Error tracking configured
- [ ] Performance monitoring active
- [ ] User authentication working
- [ ] All features accessible

## 💰 Revenue Ready

- [ ] Pricing pages working
- [ ] Stripe checkout functional
- [ ] Subscription management active
- [ ] Customer onboarding flow ready

Your DealershipAI is now ready for $499/month deals! 🎉
`;

fs.writeFileSync('PRODUCTION_CHECKLIST.md', checklist);
console.log('✅ Created production checklist\n');

// 5. Create performance monitoring script
console.log('📝 Step 5: Creating performance monitoring...');

const monitorScript = `#!/bin/bash

echo "🔍 DealershipAI Production Health Check"
echo "========================================"

# Check if site is accessible
echo "🌐 Checking site accessibility..."
if curl -s -o /dev/null -w "%{http_code}" https://dealershipai.com | grep -q "200"; then
    echo "✅ Site is accessible"
else
    echo "❌ Site is not accessible"
fi

# Check API endpoints
echo "🔌 Checking API endpoints..."
endpoints=(
    "/api/health"
    "/api/dashboard/enhanced"
    "/api/qai/calculate"
    "/api/eeat/calculate"
)

for endpoint in "\${endpoints[@]}"; do
    if curl -s -o /dev/null -w "%{http_code}" "https://dealershipai.com\${endpoint}" | grep -q "200\|401"; then
        echo "✅ \${endpoint} responding"
    else
        echo "❌ \${endpoint} not responding"
    fi
done

# Check authentication
echo "🔐 Checking authentication..."
if curl -s https://dealershipai.com/auth/signin | grep -q "Clerk"; then
    echo "✅ Authentication working"
else
    echo "❌ Authentication not working"
fi

echo "🎉 Health check complete!"
`;

fs.writeFileSync('scripts/health-check.sh', monitorScript);
fs.chmodSync('scripts/health-check.sh', '755');
console.log('✅ Created health check script\n');

console.log('🎉 DealershipAI Production Optimization Complete!');
console.log('');
console.log('📋 Next Steps:');
console.log('1. Review .env.production and update with your production keys');
console.log('2. Run: npm run build (should complete without errors)');
console.log('3. Deploy: npx vercel --prod');
console.log('4. Test: ./scripts/health-check.sh');
console.log('5. Start collecting $499/month deals! 💰');
console.log('');
console.log('Your DealershipAI is now optimized for 100% production capacity! 🚀');
