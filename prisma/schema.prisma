// This file was generated by Prisma. Do not edit this file directly.
// Instead, edit the schema.prisma file and run `prisma generate`.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  plan                  String   // FREE, PROFESSIONAL, ENTERPRISE
  status                String   // ACTIVE, TRIAL, CANCELLED, PAST_DUE
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  trialEnd              DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Dealership {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  city      String
  state     String
  email     String?
  phone     String?
  plan      String   @default("STARTER") // STARTER, PROFESSIONAL, ENTERPRISE
  status    String   @default("ACTIVE") // ACTIVE, SUSPENDED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  scores    Score[]
  audits    Audit[]
  users     User[]
  
  @@map("dealerships")
}

model Score {
  id            String   @id @default(cuid())
  dealershipId  String
  aiVisibility  Float
  zeroClick     Float
  ugcHealth     Float
  createdAt     DateTime @default(now())
  
  // Relations
  dealership    Dealership @relation(fields: [dealershipId], references: [id])
  
  @@map("scores")
}

model Audit {
  id            String   @id @default(cuid())
  dealershipId  String
  domain        String
  scores        String   // Store as JSON string for SQLite
  status        String   @default("completed") // pending, completed, failed
  createdAt     DateTime @default(now())
  
  // Relations
  dealership    Dealership @relation(fields: [dealershipId], references: [id])
  
  @@map("audits")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // user, admin, dealer, viewer
  dealershipId  String?
  lastLoginAt   DateTime?
  metadata      String?   // Store custom user data as JSON string
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  dealership    Dealership? @relation(fields: [dealershipId], references: [id])
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  subscriptions Subscription[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Lead {
  id          String   @id @default(cuid())
  email       String   @unique
  company     String
  phone       String?
  source      String   @default("marketing_page")
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  status      String   @default("new") // new, contacted, qualified, converted
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("leads")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  details   String   // Store as JSON string for SQLite
  timestamp DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

model ZeroClickDaily {
  id               String   @id @default(cuid())
  tenantId         String
  date             DateTime @default(now())
  // GSC
  impressions      Int
  clicks           Int
  ctrActual        Float    // clicks/impressions
  ctrBaseline      Float    // stored baseline for same cohort
  zcr              Float    // 1 - ctrActual
  // dAI probes
  aiPresenceRate   Float    // share of queries with AI answer visible
  airi             Float    // AI Replacement Index
  // GBP
  gbpImpressions   Int
  gbpActions       Int      // calls+directions+messages+bookings
  zcco             Float    // gbpActions/gbpImpressions
  // Final
  adjustedZeroClick Float   // clamp(zcr - zcco, 0..1)
  createdAt        DateTime @default(now())

  @@unique([tenantId, date])
  @@map("zero_click_daily")
}

model CtrBaseline {
  id        String   @id @default(cuid())
  tenantId  String
  // cohorting: device, brand/nonbrand, avg position bucket, etc.
  device    String
  cohort    String
  ctr       Float
  updatedAt DateTime @default(now())

  @@unique([tenantId, device, cohort])
  @@map("ctr_baseline")
}
