// DealershipAI v2.0 - Complete Production Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==================== USER & AUTH ====================

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  role        UserRole  @default(VIEWER)
  tier        Tier      @default(FREE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  dealers      Dealer[]
  sessions     Session[]
  mysteryShops MysteryShop[]
  credentials  Credential[]

  @@index([email])
  @@index([tier])
  @@map("users")
}

enum UserRole {
  VIEWER
  EDITOR
  ADMIN
  OWNER
}

enum Tier {
  FREE
  PRO
  ENTERPRISE
}

// ==================== DEALERSHIP ====================

model Dealer {
  id     String     @id @default(cuid())
  domain String     @unique
  name   String
  city   String
  state  String
  zip    String?
  phone  String?
  brands String[] // ["Hyundai", "Genesis"]
  type   DealerType @default(FRANCHISE)

  // Geographic pooling
  poolKey String // "Naples-FL" for city-level pooling

  // Ownership
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAnalyzedAt DateTime?

  // Relations
  scores       Score[]
  sessions     Session[]
  competitors  Competitor[]
  mysteryShops MysteryShop[]
  eatScores    EATScore[]

  @@index([userId])
  @@index([poolKey])
  @@index([domain])
  @@map("dealers")
}

enum DealerType {
  FRANCHISE
  INDEPENDENT
  LUXURY
  VOLUME
}

// ==================== SCORING ====================

model Score {
  id       String @id @default(cuid())
  dealerId String
  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  // Overall QAI Score
  qaiScore Float // 0-100

  // Five Pillars
  aiVisibility    Float // 0-100
  zeroClickShield Float // 0-100
  ugcHealth       Float // 0-100
  geoTrust        Float // 0-100
  sgpIntegrity    Float // 0-100

  // Platform-specific scores
  platforms Json // {"chatgpt": 85, "claude": 78, ...}

  // Metadata
  isRealQuery Boolean @default(false) // True = real AI query, False = synthetic
  confidence  Float   @default(0.85) // 0.0-1.0
  pooledFrom  String? // City if using geographic pooling

  // Timestamps
  createdAt  DateTime @default(now())
  analyzedAt DateTime @default(now())

  @@index([dealerId])
  @@index([analyzedAt])
  @@index([pooledFrom])
  @@map("scores")
}

// ==================== E-E-A-T SCORING (PRO+) ====================

model EATScore {
  id       String @id @default(cuid())
  dealerId String
  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  // E-E-A-T Components
  experience        Float // 0-100
  expertise         Float // 0-100
  authoritativeness Float // 0-100
  trustworthiness   Float // 0-100

  // Overall E-E-A-T
  overallEAT Float // 0-100

  // Supporting data
  signals         Json // {"years_in_business": 15, "certifications": [...]}
  recommendations Json // [{"action": "Add staff bios", "impact": "high"}]

  // Timestamps
  createdAt  DateTime @default(now())
  analyzedAt DateTime @default(now())

  @@index([dealerId])
  @@index([analyzedAt])
  @@map("eat_scores")
}

// ==================== SESSIONS (USAGE TRACKING) ====================

model Session {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dealerId String?
  dealer   Dealer? @relation(fields: [dealerId], references: [id], onDelete: SetNull)

  // Session details
  action SessionAction
  tier   Tier // Tier at time of session

  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("sessions")
}

enum SessionAction {
  ANALYZE
  VIEW_DASHBOARD
  GENERATE_SCHEMA
  MYSTERY_SHOP
  EXPORT_REPORT
}

// ==================== COMPETITIVE INTELLIGENCE ====================

model Competitor {
  id       String @id @default(cuid())
  dealerId String // Who is tracking this competitor
  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  // Competitor info
  competitorDomain String
  competitorName   String

  // Latest comparison
  myScore    Float?
  theirScore Float?
  delta      Float? // Positive = I'm winning

  // Tracking
  isActive      Boolean @default(true)
  alertsEnabled Boolean @default(true)

  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastComparedAt DateTime?

  @@unique([dealerId, competitorDomain])
  @@index([dealerId])
  @@map("competitors")
}

// ==================== MYSTERY SHOP (ENTERPRISE) ====================

model MysteryShop {
  id       String @id @default(cuid())
  dealerId String
  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  // Shop details
  platform String // "ChatGPT", "Claude", etc.
  query    String // "Best Honda dealer near me"
  persona  String // "first-time-buyer", "trade-in", "service"

  // Results
  mentioned            Boolean  @default(false)
  position             Int? // 1-10, null if not mentioned
  citationQuality      String? // "strong", "weak", "none"
  competitorsMentioned String[] // ["Honda of Naples", "Rick Hendrick Honda"]

  // AI Response
  fullResponse String @db.Text
  responseTime Int? // milliseconds

  // Scoring
  responseScore Float? // 0-100 based on response_time, personalization, transparency
  followUpScore Float? // 0-100 if follow-up occurred
  overallScore  Float? // Weighted average

  // Metadata
  status ShopStatus @default(COMPLETED)
  cost   Float      @default(0.02) // AI API cost in USD

  // Timestamps
  createdAt  DateTime @default(now())
  executedAt DateTime @default(now())

  @@index([dealerId])
  @@index([executedAt])
  @@index([platform])
  @@map("mystery_shops")
}

enum ShopStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// ==================== CREDENTIAL VAULT (ENTERPRISE) ====================

model Credential {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Platform
  platform     String // "google", "facebook", "yelp", "dealerrater"
  platformType CredentialType

  // Encrypted credentials
  encryptedData String @db.Text // AES-256-GCM encrypted JSON
  iv            String // Initialization vector
  authTag       String // Authentication tag

  // Status
  isActive       Boolean   @default(true)
  lastVerifiedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, platform])
  @@index([userId])
  @@map("credentials")
}

enum CredentialType {
  OAUTH
  API_KEY
  USERNAME_PASSWORD
}

// ==================== CACHE TRACKING ====================

model CacheEntry {
  id  String @id @default(cuid())
  key String @unique

  // Cache metadata
  poolKey  String? // For geographic pooling
  hitCount Int     @default(0)

  // Timestamps
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  lastAccessedAt DateTime @default(now())

  @@index([poolKey])
  @@index([expiresAt])
  @@map("cache_entries")
}

// ==================== WEBHOOK LOGS ====================

model WebhookLog {
  id         String   @id @default(cuid())
  endpoint   String
  method     String
  payload    Json
  response   Json?
  statusCode Int?
  error      String?
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@map("webhook_logs")
}

// ==================== OPTIMIZATION OPPORTUNITIES ====================

model Opportunity {
  id     String @id @default(cuid())
  domain String // Dealership domain this opportunity belongs to

  // Opportunity details
  title            String
  description      String      @db.Text
  impact           ImpactLevel
  impactScore      Float // 0-100, calculated from impact + priority + ROI
  priority         Int // Lower = higher priority (1, 2, 3...)
  estimatedROI     Float // Estimated percentage improvement
  estimatedAIVGain Float // Estimated AI Visibility gain
  effort           EffortLevel
  category         String // "schema", "citations", "reviews", "content", etc.

  // Status tracking
  status OpportunityStatus @default(PENDING)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([domain])
  @@index([domain, status]) // Composite index for domain + status queries
  @@index([impactScore, id(sort: Desc)]) // Cursor-based pagination index
  @@index([status])
  @@index([category])
  @@map("opportunities")
}

enum ImpactLevel {
  HIGH
  MEDIUM
  LOW
}

enum EffortLevel {
  LOW
  MEDIUM
  HIGH
}

enum OpportunityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ==================== SHARE-TO-UNLOCK TRACKING ====================

model ShareEvent {
  id String @id @default(cuid())

  // Share details
  domain       String? // Optional: dealership domain being analyzed
  featureName  String // Feature being unlocked
  platform     String // "twitter", "linkedin", "facebook", "copy"
  shareUrl     String  @db.Text
  referralCode String? // Optional referral code

  // Unlock tracking
  unlockExpiresAt DateTime // 24 hours from share
  isActive        Boolean  @default(true)

  // User identification (optional, for anonymous users)
  sessionId String? // localStorage session ID
  ipAddress String? // For anonymous tracking

  // Timestamps
  createdAt DateTime @default(now())

  @@index([domain])
  @@index([featureName])
  @@index([unlockExpiresAt])
  @@index([sessionId])
  @@map("share_events")
}

// ==================== ZERO-CLICK TRACKING ====================

model ZeroClickDaily {
  id       String @id @default(cuid())
  tenantId String

  // Date tracking
  date DateTime @default(now())

  // GSC (Google Search Console)
  impressions Int   @default(0)
  clicks      Int   @default(0)
  ctrActual   Float // clicks/impressions
  ctrBaseline Float // stored baseline for same cohort
  zcr         Float // 1 - ctrActual

  // dAI probes
  aiPresenceRate Float @default(0) // share of queries with AI answer visible
  airi           Float @default(0) // AI Replacement Index

  // GBP (Google Business Profile)
  gbpImpressions Int   @default(0)
  gbpActions     Int   @default(0) // calls+directions+messages+bookings
  zcco           Float @default(0) // gbpActions/gbpImpressions

  // Final adjusted metric
  adjustedZeroClick Float @default(0) // clamp(zcr - zcco, 0..1)

  createdAt DateTime @default(now())

  @@unique([tenantId, date])
  @@index([tenantId])
  @@index([tenantId, date])
  @@index([date])
  @@map("zero_click_daily")
}

model CtrBaseline {
  id       String @id @default(cuid())
  tenantId String

  // Cohort dimensions
  device String // "mobile", "desktop", "tablet"
  cohort String // e.g., "brand_pos_1_3", "nonbrand_pos_4_10"
  ctr    Float // baseline CTR for this cohort

  updatedAt DateTime @default(now()) @updatedAt

  @@unique([tenantId, device, cohort])
  @@index([tenantId])
  @@index([tenantId, device])
  @@map("ctr_baseline")
}

// ==================== SCHEMA KING VALIDATION ====================

model SchemaValidation {
  id          String   @id @default(cuid())
  dealerId    String
  page        String?
  richResults Boolean
  gpt4Score   Float
  geminiScore Float?
  claudeScore Float?
  deltaAIV    Float
  deltaATI    Float
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([dealerId, updatedAt(sort: Desc)])
  @@index([dealerId])
  @@index([page])
  @@map("schema_validations")
}

// ==================== AGENTIC COMMERCE METRICS ====================

model AgenticMetric {
  id       String   @id @default(cuid())
  dealerId String
  metric   String // "acr" | "trust_pass" | "vin_to_intent_ms" | "zero_click_coverage"
  value    Float
  ts       DateTime @default(now())

  @@index([dealerId, metric, ts(sort: Desc)])
  @@index([dealerId])
  @@index([metric])
  @@index([ts])
  @@map("agentic_metrics")
}

// ==================== PERSONALIZATION & EASTER EGGS ====================

model UserViewPrefs {
  id              String   @id @default(cuid())
  userId          String
  dealerId        String
  layoutStyle     String   @default("grid") // 'grid' | 'list' | 'compact'
  showTrends      Boolean  @default(true)
  showOci         Boolean  @default(true)
  cardDensity     String   @default("normal") // 'cozy' | 'normal' | 'dense'
  autoRefreshSec  Int      @default(60)
  pillarVisibility Json?   // Per-pillar visibility toggles
  updatedAt       DateTime @updatedAt

  @@unique([userId, dealerId])
  @@index([userId])
  @@index([dealerId])
  @@map("user_view_prefs")
}

model EggCooldown {
  id         String   @id @default(cuid())
  userId     String
  dealerId   String
  trigger    String
  lastFired  DateTime @default(now())
  
  @@unique([userId, dealerId, trigger])
  @@index([userId, dealerId])
  @@index([lastFired])
  @@map("egg_cooldowns")
}

// ==================== PULSE SYSTEM V2.0 ====================

model PulseScore {
  id       String @id @default(cuid())
  dealerId String

  // Core pulse score (0-100)
  pulseScore Float

  // Five signal dimensions (0-100 each)
  aiv         Float // AI Visibility Index
  ati         Float // Algorithmic Trust Index
  zeroClick   Float // Zero-Click Presence
  ugcHealth   Float // UGC Health Score
  geoTrust    Float // Geographic Trust Score

  // Trend analysis
  trends Json // {"direction": "up", "velocity": 1.2, "acceleration": 0.3}

  // Recommendations
  recommendations Json // ["Improve schema coverage", "Add review responses"]

  // Confidence & metadata
  confidence Float   @default(0.85) // 0.0-1.0
  timeDelta  Float   @default(0) // Hours since last update
  penalties  Json? // {"stale_data": 0, "missing_schema": 2}

  // Timestamps
  createdAt DateTime @default(now())
  timestamp DateTime @default(now())

  @@index([dealerId])
  @@index([dealerId, timestamp(sort: Desc)])
  @@index([timestamp])
  @@map("pulse_scores")
}

model PulseScenario {
  id       String @id @default(cuid())
  dealerId String

  // Scenario metadata
  scenarioName String
  description  String? @db.Text

  // Actions to simulate
  actions Json // [{"type": "improve_signal", "target": "aiv", "delta": 10, "confidence": 0.8}]

  // Results
  baselineScore  Float
  projectedScore Float
  improvement    Float
  confidence     Float

  // Monte Carlo results
  monteCarlo Json? // {"mean": 85.2, "median": 85.5, "p10": 82.1, "p90": 88.3, "stdDev": 2.1}

  // ROI analysis
  roi Json? // {"cost": 500, "value": 2500, "netValue": 2000, "roiPercent": 400}

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dealerId])
  @@index([dealerId, createdAt(sort: Desc)])
  @@map("pulse_scenarios")
}

model PulseRadarData {
  id       String @id @default(cuid())
  dealerId String

  // Radar dimensions (5 signals)
  radarData Json // {"signals": [...], "overallScore": 78.5, "balance": 0.85}

  // Metadata
  timestamp DateTime @default(now())

  // Timestamps
  createdAt DateTime @default(now())

  @@index([dealerId])
  @@index([dealerId, timestamp(sort: Desc)])
  @@map("pulse_radar_data")
}

model PulseTrend {
  id       String @id @default(cuid())
  dealerId String

  // Metric being tracked
  metric String // "pulse_score" | "aiv" | "ati" | "zero_click" | "ugc_health" | "geo_trust"

  // Current value
  current Float

  // Trend analysis
  trend        String // "up" | "down" | "stable"
  velocity     Float // Rate of change per day
  acceleration Float // Change in velocity

  // Forecast
  forecast Json? // {"next7days": 82.3, "next30days": 85.1, "confidence": 0.92}

  // Historical data
  history Json // [{"timestamp": "2025-01-01T00:00:00Z", "value": 75.5}]

  // Timestamps
  createdAt DateTime @default(now())
  timestamp DateTime @default(now())

  @@index([dealerId, metric])
  @@index([dealerId, metric, timestamp(sort: Desc)])
  @@map("pulse_trends")
}
